# -*- coding: utf-8 -*-
"""Hill And Velley Prediction

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_jviLHntxInMyjQ1F-NVEkxVrAB37ygQ

##                       Hill And Velley Prediction

**Objective :**


To develop a machine learning model for hill and valley prediction using logistic regression methodology that can accurately classify geographic locations as hills or valleys based on a set of input features.The model will be trained on a labeled dataset of geographic features and their associated classifications, and then evaluated on a separate test dataset to measure its performance. The ultimate goal of this project is to provide a useful tool for identifying hills and valleys in different geographic locations, which may have important applications in fields such as geology, agriculture, and urban planning.
*italicized text*

**Import Library**
"""

import numpy as np
import pandas as pd

"""**Import Data**"""

df = pd.read_csv("https://github.com/YBI-Foundation/Dataset/raw/main/Hill%20Valley%20Dataset.csv")
df.head()

"""**Describe Data**"""

df.info()

df.describe(include = 'all')

df.columns

#ALL COLUMNS ARE NOT PRINTED

print(df.columns.tolist())

"""**Get Unique Value**"""

df['Class'].value_counts()

df.groupby('Class').mean()

"""**Define Target Variable(y) and Feature Variable(X)**"""

y = df['Class']
y.shape

X = df.drop('Class' , axis = 1)
X.shape

"""**Get plot of first two rows**"""

import matplotlib.pyplot as plt
plt.plot(X.iloc[ 0 , :])
plt.title("VELLEY")

plt.plot(X.iloc[1,:])
plt.title('HILL')

"""**Get X variable Standardized**"""

from sklearn.preprocessing import StandardScaler
ss = StandardScaler()
X = ss.fit_transform(X)
X

"""**Train Test Split**"""

from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X , y , test_size = 0.3 , random_state = 78)

"""**Get Model Train**"""

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train, y_train)

"""**Get Model Predection**"""

y_pred = lr.predict(X_test)
y_pred

"""**Get Probability of each predicted classes**"""

lr.predict_proba(X_test)

"""**Get Model Evaluation**"""

from sklearn.metrics import confusion_matrix , classification_report

print(confusion_matrix(y_test , y_pred))

print(classification_report(y_test , y_pred))

"""**Get Future Predictions**"""

X_new = df.sample(1)
X_new

X_new.shape

X_new = X_new.drop('Class', axis = 1)
X_new

X_new.shape

X_new = ss.fit_transform(X_new)
y_pred_new = lr.predict(X_new)
y_pred_new

lr.predict_proba(X_new)